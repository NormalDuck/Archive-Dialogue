[{"title":"DialogueServer","type":0,"sectionRef":"#","url":"/Dialogue/api/DialogueServer","content":"","keywords":""},{"title":"Functions​","type":1,"pageTitle":"DialogueServer","url":"/Dialogue/api/DialogueServer#functions","content":" "},{"title":"Mount​","type":1,"pageTitle":"DialogueServer","url":"/Dialogue/api/DialogueServer#Mount","content":"&lt;/&gt; DialogueServer.Mount( Dialogue: string,-- hi Part: Instance ,-- The instance where clients can trigger the dialogue CustomProximityPrompt: ProximityPrompt? ) → ()  "},{"title":"ServerSignals","type":0,"sectionRef":"#","url":"/Dialogue/api/ServerSignals","content":"","keywords":""},{"title":"Functions​","type":1,"pageTitle":"ServerSignals","url":"/Dialogue/api/ServerSignals#functions","content":" "},{"title":"AddTriggerSignal​","type":1,"pageTitle":"ServerSignals","url":"/Dialogue/api/ServerSignals#AddTriggerSignal","content":"&lt;/&gt; ServerSignals:AddTriggerSignal(fn: (player: Player ) → ()) → () Sends a signal whenever this Dialogue component has been triggered. local Dialogue = require(path.to.dialogue) Dialogue.Mount( Dialogue.CreateDialogueTemplate( Dialogue.CreateMessageTemplate(Dialogue.ConstructMessage():AddTriggerSignal(function(player) print(`{player} triggered it!`) end)) :AddTriggerSignal(function() print(&quot;works for all constructors!&quot;) end) :AddTriggerSignal(function() print(&quot;You can also chain them!&quot;) end) :AddTimeoutSignal(2, function() print(&quot;Or mix with the other signal!&quot;) end), workspace.Instance ) )   "},{"title":"AddTimeoutSignal​","type":1,"pageTitle":"ServerSignals","url":"/Dialogue/api/ServerSignals#AddTimeoutSignal","content":"&lt;/&gt; ServerSignals:AddTimeoutSignal( Time: number, fn: (player: Player ) → () ) → () Sends a signal whenever it reaches the time and client doesn't perform any action to the dialogue component local Dialogue = require(path.to.dialogue) Dialogue.Mount( Dialogue.CreateDialogueTemplate( Dialogue.CreateMessageTemplate(Dialogue.ConstructMessage():AddTimeoutSignal(2, function(player) print(`{player} this prints when client doesn't finish your message within 2 seconds!`) end)) :AddTimeoutSignal(1, function() print(&quot;The next chain prints at the same time!&quot;) end) :AddTimeoutSignal(1, function() print(&quot;Chains don't yield each other!&quot;) end) :AddTriggerSignal(2, function() print(&quot;Or mix with the other signal!&quot;) end), workspace.Instance ) )  "}]