[{"title":"DialogueClient","type":0,"sectionRef":"#","url":"/Dialogue/api/DialogueClient","content":"","keywords":""},{"title":"Types​","type":1,"pageTitle":"DialogueClient","url":"/Dialogue/api/DialogueClient#types","content":" "},{"title":"CloseDialogue​","type":1,"pageTitle":"DialogueClient","url":"/Dialogue/api/DialogueClient#CloseDialogue","content":"&lt;/&gt; type CloseDialogue = RBXScriptSignal  whenever the dialogue is closed by the server (clients cannot close dialogue by themselves)  "},{"title":"OpenDialogue​","type":1,"pageTitle":"DialogueClient","url":"/Dialogue/api/DialogueClient#OpenDialogue","content":"&lt;/&gt; type OpenDialogue = RBXScriptSignal  whenever the client triggers a proximity prompt that is dialogue related  "},{"title":"ChoiceChosen​","type":1,"pageTitle":"DialogueClient","url":"/Dialogue/api/DialogueClient#ChoiceChosen","content":"&lt;/&gt; type ChoiceChosen = RBXScriptSignal  whenever the client has selected any choice in choice state  "},{"title":"SwitchToChoice​","type":1,"pageTitle":"DialogueClient","url":"/Dialogue/api/DialogueClient#SwitchToChoice","content":"&lt;/&gt; type SwitchToChoice = RBXScriptSignal  Whenever the client has finished the messages switched into choice state  "},{"title":"NextMessage​","type":1,"pageTitle":"DialogueClient","url":"/Dialogue/api/DialogueClient#NextMessage","content":"&lt;/&gt; type NextMessage = RBXScriptSignal  whenever the server exposes a message to the client "},{"title":"Functions​","type":1,"pageTitle":"DialogueClient","url":"/Dialogue/api/DialogueClient#functions","content":" "},{"title":"GetDialogueState​","type":1,"pageTitle":"DialogueClient","url":"/Dialogue/api/DialogueClient#GetDialogueState","content":"&lt;/&gt; DialogueClient.GetDialogueState() → &quot;Message&quot; | &quot;Choice&quot; | &quot;Closed&quot; returns the choices  "},{"title":"GetMessage​","type":1,"pageTitle":"DialogueClient","url":"/Dialogue/api/DialogueClient#GetMessage","content":"&lt;/&gt; DialogueClient.GetMessage() → { Head: string | nil, Body: string | nil }   "},{"title":"GetChoices​","type":1,"pageTitle":"DialogueClient","url":"/Dialogue/api/DialogueClient#GetChoices","content":"&lt;/&gt; DialogueClient.GetChoices() → {Choice} | nil although it returns choice, but the client cannot read the response nor the listeners for safety reasons. "},{"title":"ServerSignals","type":0,"sectionRef":"#","url":"/Dialogue/api/ServerSignals","content":"","keywords":""},{"title":"Functions​","type":1,"pageTitle":"ServerSignals","url":"/Dialogue/api/ServerSignals#functions","content":" "},{"title":"AddTriggerSignal​","type":1,"pageTitle":"ServerSignals","url":"/Dialogue/api/ServerSignals#AddTriggerSignal","content":"&lt;/&gt; ServerSignals:AddTriggerSignal(fn: (player: Player ) → ()) → () Sends a signal whenever this Dialogue component has been triggered. local Dialogue = require(path.to.dialogue) Dialogue.Mount( Dialogue.MakeDialogueTemplate( Dialogue.MakeMessageTemplate(Dialogue.MakeMessage():AddTriggerSignal(function(player) print(`{player} triggered it!`) end)) :AddTriggerSignal(function() print(&quot;works for all Makeors!&quot;) end) :AddTriggerSignal(function() print(&quot;You can also chain them!&quot;) end) :AddTimeoutSignal(2, function() print(&quot;Or mix with the other signal!&quot;) end), workspace.Instance ) )   "},{"title":"AddTimeoutSignal​","type":1,"pageTitle":"ServerSignals","url":"/Dialogue/api/ServerSignals#AddTimeoutSignal","content":"&lt;/&gt; ServerSignals:AddTimeoutSignal( Time: number, fn: (player: Player ) → () ) → () Sends a signal whenever it reaches the time and client doesn't perform any action to the dialogue component local Dialogue = require(path.to.dialogue) Dialogue.Mount( Dialogue.MakeDialogueTemplate( Dialogue.MakeMessageTemplate(Dialogue.MakeMessage():AddTimeoutSignal(2, function(player) print(`{player} this prints when client doesn't finish your message within 2 seconds!`) end)) :AddTimeoutSignal(1, function() print(&quot;The next chain prints at the same time!&quot;) end) :AddTimeoutSignal(1, function() print(&quot;Chains don't yield each other!&quot;) end) :AddTriggerSignal(2, function() print(&quot;Or mix with the other signal!&quot;) end), workspace.Instance ) )  "},{"title":"DialogueServer","type":0,"sectionRef":"#","url":"/Dialogue/api/DialogueServer","content":"","keywords":""},{"title":"Functions​","type":1,"pageTitle":"DialogueServer","url":"/Dialogue/api/DialogueServer#functions","content":" "},{"title":"Mount​","type":1,"pageTitle":"DialogueServer","url":"/Dialogue/api/DialogueServer#Mount","content":"&lt;/&gt; DialogueServer.Mount( Dialogue: DialogueTemplate, Part: Instance ,-- The instance where clients can trigger the dialogue CustomProximityPrompt: ProximityPrompt? ) → ()   "},{"title":"MakeDialogueTemplate​","type":1,"pageTitle":"DialogueServer","url":"/Dialogue/api/DialogueServer#MakeDialogueTemplate","content":"&lt;/&gt; DialogueServer.MakeDialogueTemplate( Message: MessageTemplate, Choice: ChoicesTemplate ) → DialogueTemplate The constructor for DialogueTemplate  "},{"title":"MakeChoicesTemplate​","type":1,"pageTitle":"DialogueServer","url":"/Dialogue/api/DialogueServer#MakeChoicesTemplate","content":"&lt;/&gt; DialogueServer.MakeChoicesTemplate( ChoiceMessage: string,-- The message to be displayed when its at choice state. ...: Choice-- The list of choices ) → ChoicesTemplate The constructor for ChoicesTemplate  "},{"title":"MakeMessageTemplate​","type":1,"pageTitle":"DialogueServer","url":"/Dialogue/api/DialogueServer#MakeMessageTemplate","content":"&lt;/&gt; DialogueServer.MakeMessageTemplate( ...: Message-- All the message to be displayed when its at message state. ) → MessageTemplate   "},{"title":"MakeMessage​","type":1,"pageTitle":"DialogueServer","url":"/Dialogue/api/DialogueServer#MakeMessage","content":"&lt;/&gt; DialogueServer.MakeMessage( Head: string, Body: string ) → Message   "},{"title":"MakeChoice​","type":1,"pageTitle":"DialogueServer","url":"/Dialogue/api/DialogueServer#MakeChoice","content":"&lt;/&gt; DialogueServer.MakeChoice( ChoiceName: string,-- The message to be displayed at choice state Response: DialogueTemplate ) → Choice  "}]